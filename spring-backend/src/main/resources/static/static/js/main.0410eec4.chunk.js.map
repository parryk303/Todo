{"version":3,"sources":["http-common.js","services/todo.service.js","components/add-todo.component.js","components/todo.component.js","components/todos-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTodo","props","onChangeTitle","bind","onChangeDescription","saveTodo","newTodo","state","description","completed","submitted","e","this","setState","target","value","TodoDataService","then","response","className","onClick","htmlFor","type","required","onChange","name","Component","Todo","getTodo","updateTodo","deleteTodo","currentTodo","message","match","params","prevState","update","history","push","TodosList","onChangeSearchTitle","retrieveTodos","refreshList","setActiveTodo","removeAllTodos","searchTitle","updateCompleted","toggleCompleted","todos","currentIndex","getAll","todo","index","deleteAll","console","log","catch","findByTitle","status","placeholder","map","key","to","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0410eec4.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'http://3.145.1.248:8080/api',\n  headers: {\n    'Content-type': 'application/json'\n  }\n});","import http from '../http-common';\n\nclass TodoDataService {\n  getAll() {\n    return http.get('/todos');\n  }\n\n  get(id) {\n    return http.get(`/todos/${id}`);\n  }\n\n  create(data) {\n    return http.post('/todos', data);\n  }\n\n  update(id, data) {\n    return http.put(`/todos/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/todos/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/todos`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/todos?title=${title}`);\n  }\n}\n\nexport default new TodoDataService();","import React, { Component } from 'react';\nimport TodoDataService from '../services/todo.service';\n\nexport default class AddTodo extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.saveTodo = this.saveTodo.bind(this);\n    this.newTodo = this.newTodo.bind(this);\n\n    this.state = {\n      id: null,\n      title: '',\n      description: '', \n      completed: false,\n      submitted: false\n    };\n  }\n\n  onChangeTitle(e) {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n  saveTodo() {\n    var data = {\n      title: this.state.title,\n      description: this.state.description\n    };\n\n    TodoDataService.create(data)\n      .then(response => {\n        this.setState({\n          id: response.data.id,\n          title: response.data.title,\n          description: response.data.description,\n          completed: response.data.completed,\n          submitted: true\n        });\n      })\n  }\n\n  newTodo() {\n    this.setState({\n      id: null,\n      title: '',\n      description: '',\n      completed: false,\n      submitted: false\n    });\n  }\n\n  render() {\n    return (\n      <div className='submit-form'>\n        {this.state.submitted ? (\n          <div>\n            <h4>Todo successfully added!</h4>\n            <button className='btn btn-success' onClick={this.newTodo}>\n              Add Another\n            </button>\n          </div>\n        ) : (\n          <div>\n            <div className='form-group'>\n              <label htmlFor='title'>Title</label>\n              <input\n                type='text'\n                className='form-control'\n                id='title'\n                required\n                value={this.state.title}\n                onChange={this.onChangeTitle}\n                name='title' />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='description'>Description</label>\n              <input\n                type='text'\n                className='form-control'\n                id='description'\n                required\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                name='description' />\n            </div>\n            <button onClick={this.saveTodo} className='btn btn-success'>\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TodoDataService from '../services/todo.service';\n\nexport default class Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getTodo = this.getTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n\n    this.state = {\n      currentTodo: {\n        id: null,\n        title: '',\n        description: '',\n        completed: false\n      },\n      message: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getTodo(this.props.match.params.id);\n  }\n\n  onChangeTitle(e) {\n    const title = e.target.value;\n    this.setState(function (prevState) {\n      return {\n        currentTodo: {\n          ...prevState.currentTodo,\n          title: title\n        }\n      };\n    });\n  }\n\n  onChangeDescription(e) {\n    const description = e.target.value;\n    this.setState(prevState => ({\n      currentTodo: {\n        ...prevState.currentTodo,\n        description: description\n      }\n    }));\n  }\n\n  getTodo(id) {\n    TodoDataService.get(id)\n      .then(response => {\n        this.setState({\n          currentTodo: response.data\n        });\n      })\n  }\n\n  updateTodo() {\n    TodoDataService.update(\n      this.state.currentTodo.id,\n      this.state.currentTodo\n    )\n      .then(\n        this.setState({\n          message: `${this.state.currentTodo.title} was updated successfully!`\n        })\n      )\n  }\n\n  deleteTodo() {\n    TodoDataService.delete(this.state.currentTodo.id)\n      .then(\n        this.props.history.push('/todos')\n      )\n  }\n\n  render() {\n    const { currentTodo } = this.state;\n    return (\n      <div>\n        {currentTodo ? (\n          <div className='edit-form'>\n            <h4>{currentTodo.title}</h4>\n            <form>\n              <div className='form-group'>\n                <label htmlFor='title'>Title</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='title'\n                  value={currentTodo.title}\n                  onChange={this.onChangeTitle} />\n              </div>\n              <div className='form-group'>\n                <label htmlFor='description'>Description</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='description'\n                  value={currentTodo.description}\n                  onChange={this.onChangeDescription} />\n              </div>\n              <div className='form-group'>\n                <label>\n                  <strong>Status:</strong>\n                </label>\n                {currentTodo.completed ? ' Completed' : ' Pending'}\n              </div>\n            </form>\n            <button\n              id='edits'\n              className='badge badge-danger mr-2'\n              onClick={this.deleteTodo} >\n              Delete\n            </button>\n            <button\n              id='edits'\n              type='submit'\n              className='badge badge-success'\n              onClick={this.updateTodo} >\n              Update\n            </button>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TodoDataService from '../services/todo.service';\nimport { Link } from 'react-router-dom';\n\nexport default class TodosList extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\n    this.retrieveTodos = this.retrieveTodos.bind(this);\n    this.refreshList = this.refreshList.bind(this);\n    this.setActiveTodo = this.setActiveTodo.bind(this);\n    this.removeAllTodos = this.removeAllTodos.bind(this);\n    this.searchTitle = this.searchTitle.bind(this);\n    this.updateCompleted = this.updateCompleted.bind(this);\n    this.toggleCompleted = this.toggleCompleted.bind(this);\n\n    this.state = {\n      todos: [],\n      currentTodo: null,\n      currentIndex: -1,\n      searchTitle: ''\n    };\n  }\n\n  componentDidMount() {\n    this.retrieveTodos();\n  }\n\n  onChangeSearchTitle(e) {\n    const searchTitle = e.target.value;\n\n    this.setState({\n      searchTitle: searchTitle\n    });\n  }\n\n  retrieveTodos() {\n    TodoDataService.getAll()\n      .then(response => {\n        this.setState({\n          todos: response.data\n        });\n      })\n  }\n\n  refreshList() {\n    this.retrieveTodos();\n    this.setState({\n      currentTodo: null,\n      currentIndex: -1\n    });\n  }\n\n  setActiveTodo(todo, index) {\n    this.setState({\n      currentTodo: todo,\n      currentIndex: index\n    });\n  }\n\n  removeAllTodos() {\n    TodoDataService.deleteAll()\n      .then(response => {\n        console.log(response.data);\n        this.refreshList();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  searchTitle() {\n    this.setState({\n      currentTodo: null,\n      currentIndex: -1\n    });\n\n    TodoDataService.findByTitle(this.state.searchTitle)\n      .then(response => {\n        this.setState({\n          todos: response.data\n        });\n      })\n  }\n\n  updateCompleted(status) {\n    var data = {\n      id: this.state.currentTodo.id,\n      title: this.state.currentTodo.title,\n      description: this.state.currentTodo.description,\n      completed: status\n    };\n\n    TodoDataService.update(this.state.currentTodo.id, data)\n      .then(response => {\n        this.setState(prevState => ({\n          currentTodo: {\n            ...prevState.currentTodo,\n            completed: status\n          }\n        }));\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  toggleCompleted(todo) {\n    todo.completed = !todo.completed\n    var data = {\n      id: todo.id,\n      title: todo.title,\n      description: todo.description,\n      completed: todo.completed\n    };\n    \n    TodoDataService.update(todo.id, data)\n      .then(\n        this.setState({\n          currentTodo: {\n            completed: todo.completed\n          }\n        }))\n  }\n\n  render() {\n    const { searchTitle, todos, currentTodo, currentIndex } = this.state;\n    return (\n      <div>\n        {todos ? (\n          <div className='list row'>\n            <div className='col-md-8'>\n              <div className='input-group mb-3'>\n                <input\n                  type='text'\n                  className='form-control'\n                  placeholder='Search by title'\n                  value={searchTitle}\n                  onChange={this.onChangeSearchTitle} />\n                <div className='input-group-append'>\n                  <button\n                    id='search'\n                    className='btn btn-outline-secondary'\n                    type='button'\n                    onClick={this.searchTitle} >\n                    Search\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className='col-md-6'>\n              <ul className='list-group'>\n                {todos &&\n                  todos.map((todo, index) => (\n                    <li\n                      className={\n                        'list-group-item ' +\n                        (index === currentIndex ? 'active' : '')\n                      }\n                      onClick={() => this.setActiveTodo(todo, index)}\n                      key={index} >\n                      {todo.completed ? (\n                        <span\n                          className='checkbox'\n                          onClick={() => this.toggleCompleted(todo)} >\n                          {'✅'}\n                        </span>\n                      ) : (\n                        <span\n                          className='checkbox'\n                          onClick={() => this.toggleCompleted(todo)} >\n                          {'❌'}\n                        </span>\n                      )}\n                      {` : ${todo.title}`}\n                    </li>\n                  ))}\n              </ul>\n              <button\n                id='clear'\n                className='m-3 btn btn-sm btn-danger'\n                onClick={this.removeAllTodos} >\n                Clear List\n              </button>\n            </div>\n            <br />\n            <div className='col-md-6'>\n              {currentTodo ? (\n                <div>\n                  <h4>{currentTodo.title}</h4>\n                  <div className='list-group-item'>\n                    {currentTodo.description && (\n                      <div>\n                        <label>\n                          <strong>Description:</strong>\n                        </label>{' '}\n                        {currentTodo.description}\n                      </div>\n                    )}\n                    <div>\n                      <label>\n                        <strong>Status:</strong>\n                      </label>{' '}\n                      {currentTodo.completed ? 'Completed' : 'Pending'}\n                    </div>\n                  </div>\n                  <Link\n                    id='edit'\n                    to={'/todos/' + currentTodo.id}\n                    className='badge badge-warning' >\n                    Edit\n                  </Link>\n                </div>\n              ) : (\n                <div>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          <h1>Click 'Add' above, create a todo <br /><br /> to get started with your todo list!</h1>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport AddTodo from './components/add-todo.component';\nimport Todo from './components/todo.component';\nimport TodosList from './components/todos-list.component';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='main'>\n        <nav className='navbar navbar-expand navbar-dark bg-dark'>\n          <Link to={'/todos'} className='navbar-brand'>\n            Kyle's\n          </Link>\n          <div className='navbar-nav mr-auto'>\n            <li className='nav-item'>\n              <Link to={'/todos'} className='nav-link'>\n                Todos\n              </Link>\n            </li>\n            <li className='nav-item'>\n              <Link to={'/add'} className='nav-link'>\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n        <div id='container' className='container mt-3'>\n          <Switch>\n            <Route exact path={['/', '/todos']} component={TodosList} />\n            <Route exact path='/add' component={AddTodo} />\n            <Route path='/todos/:id' component={Todo} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}